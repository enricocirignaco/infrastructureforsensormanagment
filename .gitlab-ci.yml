stages:
  - test
  - build

variables:
  IMAGE_TAG: $CI_COMMIT_TAG
  REGISTRY_IMAGE: "$CI_REGISTRY_IMAGE"
  DOCKER_BUILDKIT: 1  # Enables BuildKit for caching

# This is a template for building Docker images in GitLab CI/CD.
.docker-build-template: &docker-build
  stage: build
  image: docker:20.10.16
  services:
    - name: docker:20.10.16-dind
      command: ["--tls=false"]
  before_script:
    - echo "Logging into GitLab Container Registry..."
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
  only:
    - tags

build-arduino-compiler:
  <<: *docker-build
  variables:
    IMAGE_NAME: "arduino-compiler"
  script:
    - echo "Building Arduino Compiler Image..."
    - docker build -t "$REGISTRY_IMAGE/$IMAGE_NAME:$IMAGE_TAG" -f src/compiler-engine/arduino-compiler/Dockerfile .
    - echo "Pushing image to GitLab Container Registry..."
    - docker push "$REGISTRY_IMAGE/$IMAGE_NAME:$IMAGE_TAG"

build-compiler-engine:
  <<: *docker-build
  variables:
    IMAGE_NAME: "compiler-engine"
  script:
    - echo "Building Compiler Engine Image..."
    - docker build -t "$REGISTRY_IMAGE/$IMAGE_NAME:$IMAGE_TAG" -f src/compiler-engine/Dockerfile src/compiler-engine
    - echo "Pushing image to GitLab Container Registry..."
    - docker push "$REGISTRY_IMAGE/$IMAGE_NAME:$IMAGE_TAG"
build-compiler-engine-cleaner:
  <<: *docker-build
  variables:
    IMAGE_NAME: "compiler-engine-cleaner"
  script:
    - echo "Building Compiler Engine Cleaner Image..."
    - docker build -t "$REGISTRY_IMAGE/$IMAGE_NAME:$IMAGE_TAG" -f src/volumes-cleaner/Dockerfile src/volumes-cleaner
    - echo "Pushing image to GitLab Container Registry..."
    - docker push "$REGISTRY_IMAGE/$IMAGE_NAME:$IMAGE_TAG"
build-frontend:
  <<: *docker-build
  variables:
    IMAGE_NAME: "reverse-proxy"
  script:
    - echo "Building Frontend Image..."
    - docker build -t "$REGISTRY_IMAGE/$IMAGE_NAME:$IMAGE_TAG" -f src/webapp-frontend/Dockerfile .
    - echo "Pushing image to GitLab Container Registry..."
    - docker push "$REGISTRY_IMAGE/$IMAGE_NAME:$IMAGE_TAG"


# # Test SSH connection job
# test-ssh-connection:
#   stage: test
#   image: alpine
#   before_script:
#     - apk add --no-cache openssh
#     - echo "$SSH_PRIVATE_KEY_B64" | base64 -d > id_rsa
#     - chmod 600 id_rsa
#   script:
#     - ssh -i id_rsa -o StrictHostKeyChecking=no bfh@10.248.11.94 'echo "SSH connection successful"'
#   rules:
#     - when: always
# Command to run: export TAG=v0.0.4 && docker compose -f compose-prod.yaml pull && docker compose -f compose-prod.yaml up -d